<?xml version="1.0" encoding="UTF-8" ?>

<!ELEMENT linx ( config ) >
<!--
Under the config node are all the Linx webapp-related (and non-db) configurable
parameters to control Linx core behavior. Many Linx 1.x behaviors are now
configurable in the Jetty or Tomcat web server.
-->
<!ELEMENT config ( authentication, locale, logging, email?, alerts?  ) >

<!-- Authentication
node indicates whether Linx should authenticate the user/password
against the configured Windows LDAP server, or against the Linx 
user access control tables.
realm can be {windows | linx}
If it's windows, must have the providerURL node as LDAP://servername:port 
(if default port, port is optional)
-->
<!ELEMENT authentication ( realm, providerURL*, ldapUserPhraseSuffix ) >
<!ELEMENT realm ( #PCDATA ) >
<!ELEMENT providerURL ( #PCDATA ) >
<!ELEMENT ldapUserPhraseSuffix ( #PCDATA ) >


<!-- Locale
node describes how dates should be formatted
by Linx, and what Linx can expect in date formatting from the user and database.
localeLanguage can be {en | fr}
localeCode can be {US | UK | CA (for Canada)}
(Canadian English varies from UK and US English.)
-->
<!ELEMENT locale ( localeCode, localeLanguage, outputDateMask, inputDateMask, dbDefaultDateMask ) >
<!ELEMENT localeLanguage ( #PCDATA ) >
<!ELEMENT localeCode ( #PCDATA ) >

<!-- Date masks
dbDefaultDateMask specifies how the LIMS can expect data to be
output by the database, and is very rdbms-specific.
-->
<!ELEMENT dbDefaultDateMask ( #PCDATA ) >
<!ATTLIST dbDefaultDateMask rdbms NMTOKEN #REQUIRED >

<!--
outputDateMask describes how the LIMS should format dates
for display/return to clients. This format should be acceptable
to java.text.DateFormat class.
-->
<!ELEMENT outputDateMask ( #PCDATA ) >
<!--
inputDateMask describes how a user is allowed to enter dates.
Linx is also a bit lenient, and tries various delimiters when
interpreting a user's input, e.g. 2/31/2004, 2-31-2004.
-->
<!ELEMENT inputDateMask ( #PCDATA ) >


<!-- Logging
configuration parameters
Default log namespace is 'com.wildtype.linx.limswide',
and should NOT be changed. Other logs should use
unique namespaces too.
-->
<!ELEMENT logging ( log* ) >
<!ATTLIST log enabled NMTOKEN #REQUIRED
			  maskPasswords (true|false) #REQUIRED
              name NMTOKEN #REQUIRED
              default NMTOKEN #REQUIRED
              copyToConsole NMTOKEN #IMPLIED
              verbosity NMTOKEN #REQUIRED
              maxCount NMTOKEN #REQUIRED
              maxSize NMTOKEN #REQUIRED
              logPath CDATA #REQUIRED
              logMask CDATA #REQUIRED
              filter NMTOKEN #IMPLIED
              formatter NMTOKEN #IMPLIED >
<!ELEMENT log ( debugPatterns ) >

<!-- Default filter class is provided to apply the debugPatterns
filtering. Other filters are easy to implement, and can subclass
com.wildtype.linx.log.LimsLogFilter if desired.
-->

<!-- After maxCount, log files will roll over, erasing the oldest file,
which is also the highest-numbered file
-->

<!-- After maxSize is reached, log files will roll over, erasing the oldest file,
which is also the highest-numbered file
-->

<!-- logPath is relative to the application server, not the webapp,
so logs should usually be found under JETTY_HOME/webapps/logs.
-->

<!-- logMask is a Java regex pattern that describes the generation
and unique id for a log file name. See Java logging API for more details
(URL in serverConfig.xml).
-->

<!-- formatter gives the name of a class to invoke before log material
is written to output, to allow for reformatting. For some reason,
XMLFormatter is the default, so SimpleFormatter (support all text)
must be explicitly cited here.
-->


<!-- Linx 2.0 actually evaluates verbosity from 0 - 99 to decide which
of 7 levels of debugging to report: FINEST, FINER, FINE, INFO, DEBUG,
WARNING, SEVERE. 99 will report FINEST and higher. 50 will report DEBUG
and higher. 20 will report only SEVERE and WARNING. 0 will not debug print
unless messages are explicitly sent to System.out by custom code.
-->

<!-- Debug patterns

0..n package name fragments are listed here
to indicate that debug messages from source files under
these packages should be logged. For example:

com.wildtype.linx

will log all messages generated by Linx 2.0 core,
while

com.wildtype.linx.db.DbHelper

will show only messages generated by the DbHelper class and its
subclasses. Debug patterns are evaluated independently, and do not interact.
Use filter classes for finer control.
-->
<!ELEMENT debugPatterns ( debugPattern* ) >
<!ATTLIST debugPatterns comment NMTOKEN #IMPLIED >

<!ELEMENT debugPattern ( #PCDATA ) >



<!-- Email
(outgoing) configuration parameters
are used to send alerts configured in the alerts node.
Although it may seem awkward to use list names as tag names,
it makes the dynamic list lookup by LinxConfig class more efficient.
For no email alerts, delete the default DBLatencyAlert class
from the alerts node, or set thresholds very high.
-->
<!ELEMENT email ( smtpServer, from, lists ) >
<!-- Examples of SMTP servers include smtp.west.cox.net
or mail.pharmatica.com
-->
<!ELEMENT smtpServer ( #PCDATA )>
<!ATTLIST smtpServer
          port NMTOKEN #IMPLIED >

<!-- Most anti-spamming mail servers will now verify that
'From' is an actual email address, so provide a real or fall-through account. -->
<!ELEMENT from ( #PCDATA ) >
<!-- Mail alerts are sent to each member of a list. -->
<!ELEMENT lists ( list* ) >
<!-- If a recipient's email is rejected, an error will be logged
and printed to the console, but there are no other consequences. -->
<!ELEMENT list ( to+ ) >
<!ATTLIST list
          id NMTOKEN #REQUIRED >
<!ELEMENT to ( #PCDATA ) >

<!--
** alerts
**
** Alerts are classes/objects that monitor the status of the database and
** send alert email messages to mail lists configured in the <email>
** section.  Each alert element requires a name, class, and an optional
** series of arguments for the alert instance.  Set the <runInterval> element
** value to control the amount of idle time that passes, in milliseconds,
** between subsequent checks on the alert. All alerts are checked
** approximately <runInterval> milliseconds after construction, and thereafter
** every <runInterval> milliseconds.
**
-->
<!ELEMENT alerts ( alert ) >
<!ELEMENT alert ( runInterval, class, arg* ) >
<!-- Delay is in milliseconds. -->
<!ELEMENT runInterval ( #PCDATA )>
<!-- Fully qualified class name of the alert, which
should extend java.util.TimerTask. com.wildtype.linx.util.alerts.DBLatency
is an example from the Linx core. -->
<!ELEMENT class ( #PCDATA ) >
<!-- Arguments are passed to the alert class constructor as String[]. -->
<!ELEMENT arg ( #PCDATA ) >


